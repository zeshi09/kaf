<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map of Locations</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        body {
            display: flex;
            margin: 0;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        #map {
            flex: 3;
            height: 100%;
        }
        #sidebar {
            flex: 1;
            max-width: 300px;
            padding: 10px;
            overflow-y: auto;
            border-left: 1px solid #ccc;
            background-color: #f9f9f9;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        #filter-form {
            margin-bottom: 10px;
        }
        #locations-list {
            flex: 1;
            overflow-y: auto;
            border-top: 1px solid #ccc;
        }
        .filter-form {
            margin-bottom: 10px;
        }
        #scroll-to-top {
            position: sticky;
            bottom: 10px;
            align-self: flex-end;
            padding: 10px;
            border: none;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            font-size: 16px;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            display: none; /* Скрываем кнопку по умолчанию */
            z-index: 10;
        }
        #scroll-to-top:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="sidebar">
        <div id="filter-form" class="filter-form">
            <label for="chrononym">Фильтр по хронониму:</label>
            <select id="chrononym">
                <option value="">--Показать все--</option>
            </select>
            <button id="filter-btn">Использовать фильтр</button>
        </div>
        <div id="locations-list">
            <!-- Список хрононимов будет загружен сюда -->
        </div>
        <button id="scroll-to-top" title="Наверх">&#8593;</button>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([57.0, 43.0], 7);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        let markers = [];

        // Функция для загрузки данных и обновления карты
        function fetchLocations(chrononym = "") {
            // Удаляем старые маркеры
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];

            // Запрос на сервер для получения данных
            fetch(`/api/locations?chrononym=${encodeURIComponent(chrononym)}`)
                .then(response => response.json())
                .then(data => {
                    const locationsList = document.getElementById('locations-list');
                    locationsList.innerHTML = ""; // Очищаем список перед обновлением

                    data.forEach(location => {
                        // Добавление маркера на карту
                        const marker = L.marker([location.latitude, location.longitude])
                            .addTo(map)
                            .bindPopup(`
                                <b>${location.chrononym}</b><br>
                                <i>${location.definition}</i><br>
                                ${location.context}<br>
                                <small>${location.toponym}</small>
                            `);
                        markers.push(marker);

                        // Добавление элемента списка
                        const listItem = document.createElement('div');
                        listItem.textContent = location.chrononym;
                        listItem.style.cursor = 'pointer';
                        listItem.style.padding = '5px';
                        listItem.style.borderBottom = '1px solid #ddd';
                        listItem.addEventListener('click', () => {
                            map.setView([location.latitude, location.longitude], 10);
                            marker.openPopup();
                        });
                        locationsList.appendChild(listItem);
                    });
                })
                .catch(error => console.error('Error fetching locations:', error));
        }

        // Функция для загрузки уникальных Chrononym
        function loadChrononyms() {
            fetch('/api/chrononyms')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('chrononym');
                    data.forEach(chrononym => {
                        const option = document.createElement('option');
                        option.value = chrononym;
                        option.textContent = chrononym;
                        select.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading chrononyms:', error));
        }

        // Обработчик кнопки фильтрации
        document.getElementById("filter-btn").addEventListener("click", () => {
            const chrononym = document.getElementById("chrononym").value;
            fetchLocations(chrononym);
        });

        // Показать кнопку, если прокрутили вниз
        const sidebar = document.getElementById('locations-list');
        const scrollToTopBtn = document.getElementById('scroll-to-top');
        sidebar.addEventListener('scroll', () => {
            if (sidebar.scrollTop > 100) {
                scrollToTopBtn.style.display = 'block';
            } else {
                scrollToTopBtn.style.display = 'none';
            }
        });

        // Обработчик нажатия на кнопку
        scrollToTopBtn.addEventListener('click', () => {
            sidebar.scrollTo({
                top: 0,
                behavior: 'smooth' // Плавная прокрутка
            });
        });

        // Загрузка всех точек при загрузке страницы
        fetchLocations();

        // Загрузка уникальных Chrononym при загрузке страницы
        loadChrononyms();
    </script>
</body>
</html>

